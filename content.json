{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"friends","text":"","link":"/friends/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"About Me","text":"12345678910const person = { name: \"WeiLin-Liao\", nickname: \"Reself‘s\", status: \"Single\", birthday: \"1999.05.29\", constellation: \"Gemini\", address: \"Ganzhou,Jiangxi\", motto: \"Always believe that the best things are about to happen!\"}for(value in person) console.log(value + \"：\" + person[value]); About Blog 建立本博客的目的是为了记录本人的一些个人经历及生活感想。 本博客内容仅代表作者本人的一些看法观念，内容仅供阅读不代表其他，如需转载请注明本站出处。 如果您发现本博客有您未署名的作品，请立即和作者联系，作者会在第一时间加上您的署名或作相关处理。 如果您对本博客感兴趣或者正在学习前端的道路上，欢迎您加入讨论群共同进步。 Contacts Github：Reself’s 公众号：林小没 Group：技术交流群 Email：weilin-liao@qq.com","link":"/about/index.html"}],"posts":[{"title":"js+thinkphp 实现jsonp跨越","text":"1、使用js创建script动态插入页面 1234567891011// 用来创建script标签(function() { // 创建一个script标签 var script = document.createElement('script'); // 指定script的类型 script.type = 'text/javascript'; // 定义script请求的链接 后面加上callBack 请求成功后的回调 script.src = 'http://test.com/public/index.php/index/index/index?resume=all&amp;callBack=jsonp'; // 把创建的标签插入到body的前面 document.body.firstElementChild.append(script);}()) 2、创建该方法用来接收后台传过来的数据12345// （response）参数 用来接收后台传过来的数据// jsonp 为函数名 可以自定义 但是必须和callBack后面的值一样function jsonp(response) { console.log(response)} 3、服务器端代码 后端接收前端传过来的callBack方法名 然后返回jsonp(data) 执行并把后台查找到的数据放在方法里面这就是jsonp实现跨越的精髓 1234567891011121314151617181920212223&lt;?phpnamespace app\\index\\controller;use think\\Controller;use think\\Request;use think\\Db;class Index extends Controller{ public function index() { $request = Request::instance(); if($request -&gt; GET()) { // 接收自定义的参数 $resume = input('resume'); // 接收前端定义的回调函数 $callBack = input('callBack'); if($resume == 'all') { // 这里表示需要全部简历信息 $data = json_encode(Db::name('resume')-&gt;select()); echo $callBack.'('.$data.')'; // 返回用户定义的方法名 加上括号 里面把数据放进去 前端接收到会执行 } }} 4、最后前端就可以得到想要的数据了","link":"/passages/2019/06/14/js+thinkphp 实现jsonp/"},{"title":"vuex学习笔记","text":"1. 安装vuex1npm install vuex --save 2. 导入vuex创建store对象1234567891011// store/index.jsimport Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)export default new Vuex.Store({ state: { count: 0 }}) 3. 将Store挂载到vue实例12345678910// main.jsimport store from './store'new Vue({ el: '#app', store, components: { App }, template: '&lt;App/&gt;'}) 4. 核心概念 1. State 访问State数据的第一种方式 1&lt;view&gt;{{$store.state.count}}&lt;/view&gt; 1this.$store.state.count += 1 访问State数据的第二种方式 12345import { mapState } from 'veux'computed: { ...mapState(['count'])} 1&lt;view&gt;{{count}}&lt;/view&gt; 2. Mutation（只支持同步操作） 第一种方式 123456789101112// store/index.jsexport default new Vuex.Store({state: { count: 0},mutations: { add (state, step) { state.count += step }}}) 1234567891011// components/.vuemethods: { add () { // 触发mutations this.$store.commit('add', 1) }, del () { this.$store.commit('del', 1) }} 第二种方式 12345678910111213141516// components/.vue// 导入mapMutations函数import { mapMutations } from 'vuex'methods: { // 将mapMutations映射到当前组件 ...mapMutations(['add', 'del']), // 直接调用即可 tapEvent () { this.add() this.del() }} 3. Action（支持异步操作） 第一种方法 1234567891011121314151617181920// store/index.jsexport default new Vuex.Store({ state: { count: 0 }, mutations: { add (state, step) { state.count += step } }, actions: { addSync (context) { setTimeout(() =&gt; { // 通过触发Mutations的方式间接变更数据 context.commit('add') }, 1000) } }}) 12345678// components/.vuemethods: { handle () { // 触发actions this.$store.dispatch('addSync') }} 第二种方法 1234567891011// 导入mapActions函数import { mapActions } from 'vuex'// 将函数映射为当前组件的methods中methods: { ...mapActions(['addSync']), handle () { this.addSync(1) }} 4. Getter 第一种方法 123456789101112// store/index.jsexport default new Vuex.Store({ state: { count: 0 }, getters: { showCount (state) { return state.count } }}) 123// 访问this.$store.getters.showCount() 第二种方法 1234567import { mapGetters } from 'vuex'computed: { ...mapGetters(['showCount'])}this.$store.getters.showCount() 1&lt;view&gt;{{showCount}}&lt;/view&gt;","link":"/passages/2020/04/02/vuex学习笔记/"},{"title":"总结一下这几天遇到的面试题","text":"css如何切换盒模型____。 1box-sizing: border-box / content-box; 0.1 + 0.2 == 0.3_______。 1false HTML5中js新增的选择器api__、____。 12document.querySelector()document.querySelectorAll() HTML5新增的标签有哪些。 12345678&lt;nav&gt;&lt;/nav&gt;&lt;vedio&gt;&lt;/vedio&gt;&lt;aside&gt;&lt;/aside&gt;&lt;header&gt;&lt;/header&gt;&lt;footer&gt;&lt;/footer&gt;&lt;canvas&gt;&lt;/canvas&gt;&lt;section&gt;&lt;/section&gt;&lt;article&gt;&lt;/article&gt; 写出让#move在wrapper正中央的所有方法。 123&lt;div id=\"parent\"&gt; &lt;div id=\"move\"&gt;&lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142431. flex布局#parent { displey: flex; justify-content: center; item-aligns: center;}2. table-cell布局#parent { display: table-cell; vertical-align: middle; text-align: center;}#move { display: inline-block;}3. position#parent { position: relative;}i.#move { position: absolute; top: 0; left: 0; bottom: 0; right: 0; margin: auto;}ii.#move { position: absolute; left: 50%; top: 50%; margin-top: -50px; margin-left: - 50px;}iii. #move { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%)} 写出你所知道清除浮动的方式并说明优缺点。 1231. 额外标签法&lt;div style=\"clear: both;\"&gt;&lt;/div&gt;缺点：影响代码质量，不符合标准 1234562. 触发BFC实现清除浮动{ overflow: hidden;}优点：代码简洁缺点：需要显示的内容会被隐藏 12345678910111213143. 伪类清楚浮动.clearfix:after,.clearfix:before { content: \"\"; display: block; height: 0; clear:both; visibility: hidden;}.clearfix { *zoom: 1; /*ie6清除浮动的方式 *号只有IE6-IE7执行}缺点：ie6-ie7不支持伪类优点：代码简洁，符合标准 完成一下代码使程序能够正常输出。 123456789function test (_arr, _e) { ... }var arr = [1,2,3,4,5]if (test(arr, 1) === 0 &amp;&amp; test(arr, 6) === -1) { console.log('小没没')} 123function test (_arr, _e) { return _arr.indexOf(_e)} js常见的数据类型。 12基本数据类型：Number、String、Boolean、undefined、null引用数据类型：Array、Object、Function、Date、RegExp 写一个闭包的例子。 1234567891011121314151617function test () { var arr = [] for (var i = 0; i &lt; 10; i ++) { arr[i] = (function (i) { console.log(i) }(i)) } return arr}var myArr = test()for (var j = 0; j &lt; 10; j ++) { myArr[j]()} 使用常见的方法给btn添加一个thisClick()事件 1&lt;div id=\"btn\"&gt;&lt;/div&gt; 12345678910111213var btn = document.getElementById('btn')1. btn.onclick = function () { thisClick()}2. btn.addEventlistener('click', thisClick, false)3. $('#btn').click(thisClick())4. $('#btn').on('click', thisClick)5. $('#btn').bind('click', thisClick) vue生命周期。 1234567891011121314151617181920212223242526272829303132// 创建前状态beforeCreate () { }// 创建完毕状态created () { }// 挂载前状态beforeMount () { }// 挂载结束状态mounted () { }// 更新前状态beforeUpdate () { }// 更新完成状态updated () { }// 销毁前状态beforeDestroy () { }// 销毁完成状态destroy () { }","link":"/passages/2020/04/04/总结一下这几天遇到的面试题/"},{"title":"使用git推送项目至远程仓库GitHub教程","text":"本文目录一、下载安装并配置git二、注册guithub账号并新建一个项目 三、把项目克隆到本地四、创建文件并推送五、创建新分支六、合并分支七、删除分支八、回退版本 一、下载安装并配置git 首先我们得先安装git点击进入Git官网进行下载根据对应的系统选择对应的版本，在这里我选择64-bit Git for Windows Setup. 这个版本 下载挺慢的 耐心等待一下，下载完成后直接双击 下一步下一步进行安装 默认选择就行安装完成后 打开cmd输入 git --version此时显示出git的版本号就证明安装成功 安装成功后我们来设置一下配置项 12git config --global user.email &quot;Your email&quot; // 输入你的名称git config --global user.name &quot;Your name&quot; // 输入你的邮箱 输入后直接按回车 使用git config --list来查看我们的配置 可以看到刚刚我们设置的已经生效了 二、注册guithub账号并新建一个项目 直接进入GitHub官网进行注册进去后点击Sign up进行注册，在这里我将不带大家注册了 注册成功后我们来新建一个项目 点击new 输入名称 hello-world Description描述我就不填了 选public公开 然后点击Create repository 创建好后我们复制这个链接后面要用到 三、把项目克隆到本地把远程项目克隆到本地使用git clone 项目地址命令 1git clone Your url // Your url 这里是要克隆项目的地址 就是刚刚我们复制的 我们选择一个存放的目录 执行 git clone https://github.com/WeiLin-Liao/hello-world.git 把项目克隆到本地 克隆成功后目录下将会出现一个文件夹 四、创建文件并推送 我们输入 echo &quot;hello-world&quot; &gt;&gt; README.md创建一个文件输入dir来查看目录下的文件列表 可以看到目录多了一个README.md 首先我们使用git status来查看当前所在的分支可以看到当前位于master分支 并且没有提交 现在我们来把刚刚创建的文件提交一下使用git add README.md来添加单个文件 或者使用git add.代表添加目录下的所以文件使用git commit -m &quot;输入提交的注释说明&quot;来添加到待提交使用git push origin master 来推送到项目的主分支master上 此时项目已经提交上去了 注意：以上操作可能会弹出GitHub登录界面直接登录就行 五、创建新分支 在现实开发当中我们往往有些项目需要更新迭代为了能和老版本区分开来这是我们可以创建新的分支使用git checkout -b 分支名称创建新的分支可以使用git branch -a来查看所有分支我们这里新增一个文件并推送到刚刚创建的production分支上去 此时我们打开github可以看到多了一个分支 六、合并分支 我们先切换到需要合并分支的代码中去使用git checkout 分支名切换到master分支使用git merge 分支名合并分支 七、删除分支 删除分支使用git branch -d 分支名删除后使用git push origin :production 冒号代表本地为空的意思 提交至仓库 此时GitHub只剩下一个分支了 八、回退版本使用git reflog命令打开提交日志123456$ git reflog5404fae (HEAD -&gt; master, origin/master) HEAD@{0}: merge production: Fast-forwardc6c1467 HEAD@{1}: checkout: moving from production to master5404fae (HEAD -&gt; master, origin/master) HEAD@{2}: commit: 测试分支c6c1467 HEAD@{3}: checkout: moving from master to productionc6c1467 HEAD@{4}: commit (initial): 第一次提交 使用git reset--hard id来进行回退id这里输入要回退的版本号","link":"/passages/2019/03/16/使用git推送项目至远程仓库GitHub/"},{"title":"单招数学-集合与集合的概念","text":"1.1.1、集合基础知识 定义：一般我们把研究对象统称为 元素 ，一些元素组成的总体叫 集合 ，也简称 集 。 表示方法：集合通常用大括号{ }或大写的拉丁字母 A,B,C… 表示，元素用小写的拉丁字母 a,b,c… 表示。 关于集合的元素的特征： （1） 确定性 ：给定一个集合，那么任何一个元素在或不在这个集合中就确定了； （2） 互异性 ：一个集合中的元素是互不相同的，即集合中的元素是不重复出现的； （3） 无序性 ：即集合中的元素无顺序,可以任意排列、调换。 元素与集合的关系：(元素与集合的关系有“属于”及“不属于”两种) （1）若a是集合A中的元素，则称a属于集合A，记作： a∈A ； （2）若a不是集合A的元素，则称a不属于集合A，记作： a∉A 。 集合的表示方法： （1） 列举法 ：把集合中的元素一一列举出来, 并用花括号括起来表示集合的方法叫列举法； （2） 描述法 ：用集合所含元素的共同特征表示集合的方法，称为描述法； （3） 图像法 ：画一条封闭的曲线,用它的内部来表示一个集合。 常见的集合集合 | 字母符号 | 表示 |:-:|:-:|:-:|自然数集 | N | {0,1,2,3,…}正整数集 | N*或N+ | {1,2,3,…}整数集 | Z | {…,-1,0,1,…}有理数集 | Q | ~实数集 | R | ~负数集 | C | ~空集 | ∅ | ~ 1.1.2、集合的基本关系 子集 ：对于两个集合A、B，如果集合A中任意一个元素都是集合B 中的元素，则称 集合 A是集合B 的子集。记作 A⊆B 。 真子集 ： 如果集合 A⊆B ，但存在元素 x∈B ，且 x∉A，则称集合A是集合B的真子集。记作： A⊊B 。 空集 ：把不含任何元素的集合叫做空集.记作： ∅ 。并规定：空集合是任何集合的子集。 计算方式： 子集：zn个 真子集：2n-1个 非空真子集：2n-2个 [ ] 例题1：A = {1,2,3} 子集个数：2x2x2=8 真子集个数：2x2x2-1=7 非空真子集：2x2x2-2=6 [ ] 例题二：A={1,2,3,4} 子集个数：2x2x2x2=16 真子集个数：2x2x2x2-1=15 非空真子集个数：2x2x2x2-2=14 1.1.3、集合间的基本运算 交集 ：由属于集合A 且属于集合B的所有元素组成的集合，称为 A 与B 的交集.记作： A∩B 并集 ：由所有属于集合A或集合 B的元素组成的集合，称为集合A与B的并集.记作： A∪B [ ] 例题：设集合A=｛1,3,5,6｝，集合B=｛2,3,4,5｝。求A ∪B 和A ∩ B？ 求交集：取两个集合相同的元素重新组成一个新集合。 A ∩ B = {3,5} 求并集：取两个集合所有的元素重新组成一个新集合。 A u B = {1,2,3,4,5,6}","link":"/passages/2020/02/05/单招数学-集合与集合的概念/"},{"title":"没有可用的软件包 npm，但是它被其它的软件包引用了","text":"总结一下这几天在deepin系统中安装node环境出现的问题开始是直接从官网下载tar包解压到桌面然后通过命令挂载到全局；这种方法确实可行，但存在个问题如果把桌面的文件删除了就没用了。于是换了另一种方法 12sudo apt-get install -y nodejssudo apt-get install -y npm 然而这不是完美的结果。安装后存在一些问题 第一个问题就是node的版本太低了现在官网都出12.x了这里的还是4.8.2 12liaoweilin@admin:~$ nodejs -vv4.8.2 第二个问题就是npm安装不上 1234567891011liaoweilin@admin:~$ sudo apt install npm正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 没有可用的软件包 npm，但是它被其它的软件包引用了。这可能意味着这个缺失的软件包可能已被废弃，或者只能在其他发布源中找到然而下列软件包会取代它： node nodejs-binE: 软件包 npm 没有可安装候选 这个时候执行npm -v结果只会有一个12liaoweilin@admin:~$ npm -vbash: npm: 未找到命令 此时心里一万个MMP 赶紧卸载了sudo apt-get remove nodejs 后来在deepin官网找到篇文章一行命令就解决了 一顿操作猛如虎sudo apt-get install -y node 1234567891011121314151617liaoweilin@admin~$ sudo apt-get install node正在读取软件包列表... 完成正在分析软件包的依赖关系树 正在读取状态信息... 完成 下列【新】软件包将被安装： node升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。需要下载 11.5 MB 的归档。解压缩后会消耗 53.1 MB 的额外空间。获取:1 http://packages.deepin.com/deepin lion/main amd64 node amd64 10.15.3 [11.5 MB]已下载 11.5 MB，耗时 11秒 (1,021 kB/s) 正在选中未选择的软件包 node。(正在读取数据库 ... 系统当前共安装有 204284 个文件和目录。)正准备解包 .../node_10.15.3_amd64.deb ...正在解包 node (10.15.3) ...正在处理用于 man-db (2.7.6.1-2) 的触发器 ...正在设置 node (10.15.3) ... 1234liaoweilin@admin:~$ node -vv10.15.3liaoweilin@admin:~$ npm -v6.4.1 最后随便把npm镜像源换成了淘宝的1npm config set registry https://registry.npm.taobao.org 查看是否生效npm config list12345678910liaoweilin@admin:~$ npm config list; cli configsmetrics-registry = \"https://registry.npmjs.org/\"scope = \"\"user-agent = \"npm/6.4.1 node/v10.15.3 linux x64\"; node bin location = /usr/bin/node; cwd = /home/liaoweilin; HOME = /home/liaoweilin; \"npm config ls -l\" to show all defaults.","link":"/passages/2020/01/08/没有可用的软件包 npm，但是它被其它的软件包引用了/"},{"title":"给hexo博客添加Live2d小人","text":"昨天看到旁边的同事在美化自己的博客，看到他在搞这个，还挺好看的，所以现在刚好有时间也折腾了一下 一、安装hexo-helper-live2d插件现在假设你已经又一个使用hexo搭建的博客，然后我们安装hexo-helper-live2d模块 hexo-helper-live2d官方中文文档 npm install –save hexo-helper-live2d 二、添加配置文件在hexo博客到_config.yml文件添加以下配置建议在根目录下的_config.yml配置，这样以后换了主题就不用重新配置了当然也可以在themes下的_config.yml配置但是要注意模型目录要填写正确 1234567891011121314151617181920live2d: enable: true # 是否启动 scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget ## 模型文件 display: position: right # 定位方向 left right top bottom width: 150 # 小人宽度 height: 300 # 小人高度 hOffset: -15 # 向👇偏移 vOffset: -15 # 像👈偏移 mobile: show: true # 手机端是否显示 react: opacity: 0.7 # 模型透明度 三、修改你喜欢的模型你可以在这里找到你喜欢的模型12345678910111213141516171819202122live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16 然后通过npm install npm install --save live2d-widget-model-xxx来安装你喜欢的模型比方说作者喜欢的是koharu这个那就使用npm install npm install --save live2d-widget-model-koharu进行安装 安装后我们在node_modules目录下面找到live2d-widget-model-koharu这个文件夹，把这个文件夹复制下来找到我们的hexo博客的根目录(因为我们是在根目录的_config.yml里添加的配置)新建一个文件夹叫做live2d_models，把刚刚我们复制的文件粘贴过来，这样我们就完成了99%，最后我们打开添加的配置文件，找到这一行12model: use: live2d-widget ## 模型文件 把use后面改成我们复制在live2d_models文件夹里面的模型目录名称，这样我们就完成了修改使用hexo d || hexo deploy来部署，然后清除一下浏览器缓存，打开后就可以发现我们添加的小人已经在屏幕右下角看着你了。","link":"/passages/2019/05/26/给hexo博客添加Live2d小人/"},{"title":"时隔四年重回Deepin","text":"第一次接触深度系统是在学校的时候，那个时win7用过一段时间后会很卡，所以在那时候就想经常换系统，想找个好点的系统来玩玩。每次装完新系统都会把桌面弄得整整齐齐的，一些基本的驱动、软件都会全部安装好，然后就是把一些没用的启动项都禁止基本上就很完美了。 随着后面的软件越装越多，慢慢的系统也就越来越卡了，特别是打开explorer的时候圈圈一直转。然后就这样重复重装系统。期间一直装的都是win7，也用一段时间win8感觉挺好的相比win7来说更流程。但要是轮省电的话还是win7比较省。 但是我并没有一直用win8因为那时候宿舍到了晚上会停电考虑到省电方面再加上那个时候win7充满电可以连续战两节课，下午上课完全可以不用带充电器去所以一段时间后还是换回来win7。 到后面换多了系统想着换个别的操作系统来玩玩，于是就在网上搜索操作系统，下载了几个界面比较好看到系统，Ubuntu优麒麟、Deepin。然后就开始安装了，其中Deepin问题还是挺多的。 记得在安装的时候进度条走着走着会安装失败。然后就是安装好进入系统更新系统的时候会出问题以及一些软件会卡死。最主要的还是应用商店的应用太少了不能解决日常使用，到后面就没用了。 那个时候黑苹果我也装过几次但是每次都是死在半路。然后就选择放弃了，但这并没有阻止我装黑苹果的欲望。每次一看到Mac os那种扁平化的界面欲望就会越来越强。 直到2019年五月份的时候我又开始了黑苹果的探索之旅，这一次我成功把黑苹果加win10双系统安装在我的笔记本上，使用Clover来引导，然后就是安装一些驱动。 安装好了后体验了几天，同时把iCloud账号也登陆了打开了查找功能，在手机里试了下查找功能能不能用感觉挺神奇的不是正版系统也能用查找功能。然后点进去看到有一个锁定的功能于是就想试试能不能用，然后我点了一下电脑就被锁了，后面我试着解开的时候特么密码还是六位数当时设置的时候就是四位数，心想这还搞个毛线，然后就乱试直到输错了等待60分钟，然后就一直没去管了。 到现在才打算重新装一下看能不能弄好，装好开机的时候结果还是弹出那个页面，然后我把硬盘拆下来换到别的电脑里试了下正常进入桌面。当时我就纳闷了重装都不行？到后面我就放弃了，然后打算换成Deepin。那个时候看到有新闻说华为笔记本预装系统改成Deepin所以就打算再体验一次。 经过一段时间的安装和体验我发现Deepin相比之前比较成熟了，应用商店的应用也多起来了，比如WeChat、TIME、QQ这些常用的应用也有了，拿来日常使用完全没什么问题。这几天一直都在使用Deepin真心觉得不错。 最后祝Deepin系统越来越完善，用户越来越多。","link":"/passages/2020/01/08/时隔四年重回Deepin/"},{"title":"解决小程序动态改变swiper数据位置被记录问题","text":"记录一下使用小程序swiper组件做滑动轮播时遇到的问题 1. 如图所示： 在切换tab栏时更换swiper的数据位置会被缓存，此时切换到轮播图只有一张的tab栏时，图片不见了，这时轮播图的位置是上次滑动的位置，因为只有一张图片，所以现在显示的是第二张的位置。 2. 如何解决： 首先添加一个 current 变量来记录当前滑块的位置 12345data () { return { current: 0 }} 然后设置给swiper设置 current 属性以及 @change 方法 12345678910111213141516171819&lt;swiper class=\"swiper-box\" :autoplay=\"false\" :current=\"current\" @change=\"swiperChange\" next-margin=\"220rpx\" style=\"height: 312rpx\"&gt; &lt;swiper-item v-for=\"(item, key) in charmList\" :key=\"key\"&gt; &lt;view class=\"view-list\" @click=\"jumpArticleDetail($event, item.id)\"&gt; &lt;image :src=\"item.image\"&gt;&lt;/image&gt; &lt;view class=\"view-content\"&gt; &lt;view class=\"title\"&gt;{{item.title}}&lt;/view&gt; &lt;view class=\"sub-title\"&gt;{{item.subTitle}}&lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;/swiper-item&gt;&lt;/swiper&gt; 当current改变时会触发 change 事件，将current赋给储存的变量 12345methods: { swiperChange (e) { this.current = e.detail.current }} 当切换 tab 时判断 current 是否大于0，如果大于0的话就让把当前滑块设为0 123456789101112131415161718192021222324252627changeTabs (key) { this.tabs.map(item =&gt; { item.active = false }) this.tabs[key].active = true this.request(this.tabs[key].id).then(res =&gt; { if (res.code === 200) { const arr = new Array() res.data.forEach(item =&gt; { arr.push({ title: item['theme'], subTitle: item['title'], image: item['img1'] }) }) this.charmList = arr if (this.current &gt; 0) { this.current = 0 } } })} 3. 修改后的效果","link":"/passages/2020/05/28/解决小程序动态改变swiper数据位置被记录问题/"},{"title":"Hexo主题themes/ 文件夹无法提交到GitHub的解决方法","text":"好久没写博客了最近在家里闲着无聊想把hexo搭建的博客用git来托管实现电脑的同步管理以前都是在笔记本电脑里写 现在回到家更喜欢用台式机so 就有了这样的想法 🆗 现在开始折腾 一、遇到的问题因为themes/hexo-theme-icarus也是从仓库里拉取下来的 他关联到了作者的git仓库所以提交不上去 123456789101112C:\\Users\\WeiLin\\Desktop\\weilin-liao.github (master -&gt; origin)λ git statusOn branch masterYour branch is up to date with 'origin/master'.Changes not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git restore &lt;file&gt;...\" to discard changes in working directory) (commit or discard the untracked or modified content in submodules) modified: themes/hexo-theme-icarus (modified content, untracked content)no changes added to commit (use \"git add\" and/or \"git commit -a\") 二、解决方案 从暂存区删除该文件夹 1git rm --cache themes/主题文件名 比如我的是主题是 hexo-theme-icarus 1git rm --cache themes/hexo-theme-icarus 把 themes/hexo-theme-icarus/.git文件夹到放到位置 比方说桌面记得把 themes/hexo-theme-icarus/.gitignore里的 _config去掉 git status查看当前状态 123456789101112C:\\Users\\WeiLin\\Desktop\\weilin-liao.github (master -&gt; origin)λ git statusOn branch masterYour branch is up to date with 'origin/master'.Changes to be committed: (use \"git restore --staged &lt;file&gt;...\" to unstage) deleted: themes/hexo-theme-icarusUntracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) themes/ 直接按步骤提交就行了 123git add .git commit -m \"add themes\"git push 后面再把刚刚的.git文件夹移动回去 🆗🆗折腾完了 干饭去了","link":"/passages/2021/02/04/Hexo主题themes-文件夹无法提交到GitHub的解决方法/"}],"tags":[{"name":"Thinkphp","slug":"Thinkphp","link":"/tags/Thinkphp/"},{"name":"JSONP","slug":"JSONP","link":"/tags/JSONP/"},{"name":"vuex","slug":"vuex","link":"/tags/vuex/"},{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"Jquery","slug":"Jquery","link":"/tags/Jquery/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Life","slug":"Life","link":"/tags/Life/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"小程序","slug":"小程序","link":"/tags/小程序/"},{"name":"解决方案","slug":"解决方案","link":"/tags/解决方案/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"Npm","slug":"Npm","link":"/tags/Npm/"},{"name":"Vuex","slug":"Vuex","link":"/tags/Vuex/"},{"name":"面试题","slug":"面试题","link":"/tags/面试题/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"面试题","slug":"面试题","link":"/categories/面试题/"},{"name":"Life","slug":"Life","link":"/categories/Life/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"解决方案","slug":"解决方案","link":"/categories/解决方案/"},{"name":"前端教程","slug":"前端教程","link":"/categories/前端教程/"},{"name":"前端笔记","slug":"前端笔记","link":"/categories/前端笔记/"},{"name":"面试题归纳","slug":"面试题归纳","link":"/categories/面试题归纳/"},{"name":"我的童话深林","slug":"我的童话深林","link":"/categories/我的童话深林/"},{"name":"童话深林","slug":"童话深林","link":"/categories/童话深林/"}]}